{
  "name": "timeline",
  "description": "Generic event timeline for node or the browser",
  "author": {
    "name": "Caleb Troughton",
    "email": "caleb@imakewebthings.com",
    "url": "http://imakewebthings.com"
  },
  "version": "0.0.1",
  "main": "./lib/timeline.js",
  "devDependencies": {
    "coffee-script": "1.2.0",
    "mocha": "0.7.0",
    "should": "0.4.2"
  },
  "keywords": [
    "time",
    "events"
  ],
  "engines": {
    "node": ">= 0.2.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/imakewebthings/timeline.git"
  },
  "bugs": {
    "url": "https://github.com/imakewebthings/timeline/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/imakewebthings/timeline/master/MIT-license.txt"
    }
  ],
  "readme": "## Installation\n\nNode:\n\n```sh\nnpm install timeline\n```\n\n```coffee\nTimeline = require 'timeline'\n```\n\nBrowser:\n\n```html\n<script src=\"/path/to/timeline.js\"></script>\n```\n\n## Usage\n\nTo create a timeline using the default options:\n\n```coffee\ntimeline = new Timeline\n```\n\nYou can also pass in options:\n\n```coffee\ntimeline = new Timeline\n  length: 5000\n  frequency: 250\n```\n\nThe defaults are:\n\n```coffee\nlength: 0\nfrequency: 100\n```\n\n`length` is the total length of the timeline. `frequency` is how often `tick` events are fired when the timeline is playing. All values are in milliseconds.\n\n## Markers\n\nA Timeline object contains an Array of markers. Markers are objects with three properties:\n\n<dl>\n  <dt>time</dt>\n  <dd>The time in milliseconds on the timeline where the marker should live.</dd>\n  <dt>forward</dt>\n  <dd>The function to execute when moving forward in time through the marker.</dd>\n  <dt>backward</dt>\n  <dd>The function to execute when moving backward in time through the marker.</dd>\n</dl>\n\n```coffee\ntimeline.markers.push\n  time: 500\n  forward: ->\n    $('.elements').show()\n  backward: ->\n    $('.elements').hide()\n```\n\n## Methods\n\nAll getters return the expected value. Every other method returns the Timeline object for chaining.\n\n<dl>\n  <dt>play()</dt>\n  <dd>Begins playing the timeline, triggering markers as it goes.</dd>\n  \n  <dt>pause()</dt>\n  <dd>Stops playing the timeline.</dd>\n  \n  <dt>length()</dt>\n  <dd>Returns the length of the timeline.</dd>\n  \n  <dt>length(ms)</dt>\n  <dd>Sets the length of the timeline to `ms`.</dd>\n  \n  <dt>frequency()</dt>\n  <dd>Returns the frequency.</dd>\n  \n  <dt>frequency(ms)</dt>\n  <dd>Sets the frequency to `ms`.</dd>\n  \n  <dt>position()</dt>\n  <dd>Returns the current position of the timeline.</dd>\n  \n  <dt>position(ms)</dt>\n  <dd>Jumps to the new position at `ms`.</dd>\n</dl>\n\n## Events\n\nTimelines also have three methods for events:\n\n<dl>\n  <dt>on(event, callback)</dt>\n  <dd>Binds the `callback` function to the event.</dd>\n  <dt>off(event[, callback])</dt>\n  <dd>Unbinds event callbacks.  If a callback is passed in as the second argument, only that callback is unbound. If there is no second argument, all callbacks for that event are unbound.</dd>\n  <dt>trigger(event, args...)</dt>\n  <dd>Triggers all callbacks bound to the event. Any extra parameters are passed as parameters to the callbacks.</dd>\n</dl>\n\nTimelines emit these events:\n\n<dl>\n  <dt>play</dt>\n  <dd>Triggered whenever a timeline starts playing.</dd>\n  <dt>pause</dt>\n  <dd>Triggered whenever a timeline pauses.</dd>\n  <dt>end</dt>\n  <dd>Triggered if the timeline hits the end.</dd>\n  <dt>tick</dt>\n  <dd>Triggered every `frequency` milliseconds while a timeline is playing, and once every time `position(ms)` is used, regardless of whether the timeline is playing or not.</dd>\n</dl>\n\n```coffee\ntimeline = new Timeline length:4000\ntimeline.on 'tick', ->\n  $('.current-time').text timeline.position()\n```\n\n## Other Properties\n\n<dl>\n  <dt>playing</dt>\n  <dd>True if the timeline is playing, false otherwise.</dd>\n</dl>\n\n## Development + Tests\n\nTests are written in CoffeeScript using [Mocha](http://visionmedia.github.com/mocha/) and [should.js](https://github.com/visionmedia/should.js). To run them:\n\n1. Clone the repository\n2. `npm install`\n3. `make test`\n\n## License\n\n[MIT](https://raw.github.com/imakewebthings/timeline/master/MIT-license.txt).",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/imakewebthings/timeline",
  "_id": "timeline@0.0.1",
  "_shasum": "62f6da7bb724ef9bc50dcb70dc9f362b3dfd3ab7",
  "_from": "timeline@",
  "_resolved": "https://registry.npmjs.org/timeline/-/timeline-0.0.1.tgz"
}
